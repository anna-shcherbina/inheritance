/*Напишите расширения метода прототипа:

1) Два класса, First и Second, Second наследует от First .

2) В First есть метод hello - он печатает в консоль "Привет я метод родителя!".

3) Нужно написать в Second метод hello, чтоб он сначала вызывал метод hello из First, а потом сразу печатал в консоль "А я наследуемый метод!"*/

'use strict';

class First {
    constructor(name) {
        this.name = name
    }
    hello() {
        console.log(`Привет, я ${this.name}!`);
    }
}

class Second extends First {
    constructor(name) {
        super(name);
    }
    test() {
        super.hello()
        console.log(`А я наследуемый метод!`);
    }
}

const third = new Second('метод родителя');
//console.log(third);
//third.hello();
third.test();

/*
Метод Фейнмана

Я научилась создавать как будто семью попугаев, где 
дед-попугай отрастил себе третью лапку, и она автоматически появилась у отца и сына (прототипное наследование против природы). Сложившееся положение вещей крайне не понравилось отцу попугаю, и он решил, что и попугаем-то больше быть не хочет и стал орлом (с тремя лапами). Как вы уже, наверное, догадались сын попугай уже больше не попугай, а настоящий орёл (но опять же с тремя лапами). Три лапы слишком много для сына и он решает отказаться от одной (теперь у нас есть обычный орёл с двумя лапами).
Единственный оставшийся попугай (дедушка) решил, что трёх лап мало и приобрёл себе ещё одну, а также решил стать ласточкой. В результате из обычного семейства попугаев мы получили: деда ласточку с четырьмя лапами, отца орла с тремя лапами, сына орла с двумя лапами. Вот она вся суть прототипного наследования.
*/